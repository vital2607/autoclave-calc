import streamlit as st
import pandas as pd
from fc_autoclave_calc import calc_fc_autoclave, calculate_missing_seq_param

st.set_page_config(page_title="–ê–≤—Ç–æ–∫–ª–∞–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç", layout="wide")

LABELS = {
    "S_base_%":        "–°–µ—Ä–∞ –≤ –æ—Å–Ω. (%)",
    "As_base_%":       "–ú—ã—à—å—è–∫ –≤ –æ—Å–Ω. (%)",
    "Seq_base_%":      "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ—Å–Ω. (%)",
    "Au_base":         "–ó–æ–ª–æ—Ç–æ –≤ –æ—Å–Ω. (–≥/—Ç)",
    "S_ext_%":         "–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",
    "As_ext_%":        "–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",
    "Seq_ext_%":       "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω. (%)",
    "Au_ext":          "–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)",
    "As_target":       "–¶–µ–ª–µ–≤–æ–π As (%)",
    "k":               "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k",
    "yield_after_cond":"–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (%)",
    "Total_capacity_t":"–û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å (—Ç)",
    "Max_Q_base_t":    "–ú–∞–∫—Å. –º–∞—Å—Å–∞ –æ—Å–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Max_total_Q_t":   "–ú–∞–∫—Å. –æ–±—â–∏–π –æ–±—ä—ë–º —Å—ã—Ä—å—è (—Ç)",
    "Q_base_t":        "–§–∞–∫—Ç. –º–∞—Å—Å–∞ –æ—Å–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Mix_total_Q_t":   "–§–∞–∫—Ç–∏—á. –æ–±—â–∞—è —Å–º–µ—Å—å (—Ç)",
    "Mix_As_%":        "–ò—Ç–æ–≥–æ–≤—ã–π As –≤ —Å–º–µ—Å–∏ (%)",
    "Mix_Seq_%":       "–ò—Ç–æ–≥–æ–≤—ã–π Seq –≤ —Å–º–µ—Å–∏ (%)",
    "Total_Seq_mass_t":"–°—É–º–º–∞ —Å–µ—Ä–Ω–æ–≥–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞ (—Ç)",
    "Autoclaves_used": "–ù—É–∂–Ω–æ –∞–≤—Ç–æ–∫–ª–∞–≤–æ–≤ (—à—Ç)",
    "Mix_Au_g_t":      "–ó–æ–ª–æ—Ç–æ –≤ —Å–º–µ—Å–∏ (–≥/—Ç)",
    "Total_Au_kg":     "–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞ (–∫–≥)",
}

def format_value(key, value):
    if value is None: return ""
    if key == "Mix_Au_g_t": return f"{value:.2f}".replace(".", ",")
    if "%" in key:          return f"{value:.2f}"
    if key.endswith("_t"):   return f"{value:.0f}"
    if key in ("Au_base","Au_ext"): return f"{value:.2f}"
    if key.endswith("_kg"):  return f"{value:.0f}"
    return f"{value:.2f}"

def main():
    ACCESS_CODE = "23101981"
    if st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", type="password") != ACCESS_CODE:
        st.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        st.stop()

    hours = st.number_input("–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ –≥–æ–¥", 0.0, 10000.0, 8000.0, 10.0)
    prod_h = st.number_input("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Seq, —Ç/—á", 0.0, 500.0, 50.0, 0.1)

    mode_val = st.radio(
        "–†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞:",
        (1, 2, 3),
        format_func=lambda x: {1:"1 ‚Äì –î–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞", 2:"2 ‚Äì –û–¥–∏–Ω –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç", 3:"3 ‚Äì –°–º–µ—à–µ–Ω–∏–µ –ø–æ –æ–±—ä—ë–º–∞–º"}[x]
    )

    # –≤—Å–µ–≥–¥–∞ –≤–≤–æ–¥–∏–º –±–∞–∑—É
    st.markdown("### üü© –ë–∞–∑–æ–≤–æ–µ —Å—ã—Ä—å—ë")
    Au_base  = st.number_input("–ó–æ–ª–æ—Ç–æ –≤ –æ—Å–Ω. (–≥/—Ç)", 0.0, 200.0, 21.0, 0.1)
    S_base   = st.number_input("–°–µ—Ä–∞ –≤ –æ—Å–Ω. (%)",   0.0, 100.0, 0.0,  0.01)
    As_base  = st.number_input("–ú—ã—à—å—è–∫ –≤ –æ—Å–Ω. (%)", 0.0, 100.0, 0.0,  0.01)
    Seq_base = st.number_input("Seq –æ—Å–Ω. (%)",      0.0,  50.0, 25.8, 0.01)

    # —Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –¥–ª—è mode 1 –∏ 3
    if mode_val in (1, 3):
        st.markdown("---")
        st.markdown("### üü• –°—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å—ã—Ä—å—ë")
        Au_ext  = st.number_input("–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)", 0.0,200.0,40.0,0.1)
        S_ext   = st.number_input("–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",   0.0,100.0,0.0,0.01)
        As_ext  = st.number_input("–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)", 0.0,100.0,0.0,0.01)
        Seq_ext = st.number_input("Seq –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",    0.0, 50.0,30.7,0.01)
    else:
        Au_ext = S_ext = As_ext = Seq_ext = 0.0

    # –æ–±—ä—ë–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è mode 3
    if mode_val == 3:
        st.markdown("---")
        st.markdown("### üì¶ –û–±—ä—ë–º—ã —Å—ã—Ä—å—è (—Ç)")
        Q_base = st.number_input("–û–±—ä—ë–º –±–∞–∑–æ–≤–æ–≥–æ, —Ç",   min_value=0.0, step=1.0, value=0.0)
        Q_ext  = st.number_input("–û–±—ä—ë–º —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ, —Ç", min_value=0.0, step=1.0, value=0.0)
    else:
        Q_base = Q_ext = None

    # —Ü–µ–ª–µ–≤—ã–µ As –∏ k –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ 3, –Ω–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ë–º –∏ –ó–ê–§–ò–ö–°–ò–†–£–ï–ú As_target=0
    st.markdown("---")
    As_target = st.number_input("–¶–µ–ª–µ–≤–æ–π As (%)", 0.0, 10.0, 0.0, 0.01)
    k         = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k", 0.0, 10.0, 1.0, 0.01)
    yc        = st.number_input("–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (%)", 0.0,100.0,70.4,0.01)

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
        # –µ—Å–ª–∏ –æ–±—ä—ë–º—ã –Ω—É–ª–µ–≤—ã–µ –∏–ª–∏ None, –ø–µ—Ä–µ–¥–∞–¥–∏–º None
        Qb = None if not Q_base else Q_base
        Qe = None if not Q_ext  else Q_ext

        # –∞–≤—Ç–æ–ø–æ–¥—Å—á—ë—Ç Seq, –µ—Å–ª–∏ –Ω—É–ª–µ–≤–æ–π –≤–≤–æ–¥
        if Seq_base == 0 and (S_base or As_base):
            Seq_base = calculate_missing_seq_param(S_base, As_base, None, k)
            st.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω Seq –æ—Å–Ω.: {Seq_base:.2f}%")
        if mode_val in (1,3) and Seq_ext == 0 and (S_ext or As_ext):
            Seq_ext = calculate_missing_seq_param(S_ext, As_ext, None, k)
            st.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω Seq —Å—Ç–æ—Ä–æ–Ω.: {Seq_ext:.2f}%")

        # —É–∫–∞–∂–µ–º As_target=0 –¥–ª—è —Ä–µ–∂–∏–º–∞ 3
        if mode_val == 3:
            As_target = 0.0

        results = calc_fc_autoclave(
            name_base="–ë–∞–∑–æ–≤—ã–π",
            Au_base=Au_base, S_base=S_base, As_base=As_base, Seq_base=Seq_base,
            work_hours_year=hours, seq_productivity_per_hour=prod_h,
            name_ext="–°—Ç–æ—Ä–æ–Ω–Ω–∏–π", Au_ext=Au_ext, S_ext=S_ext, As_ext=As_ext, Seq_ext=Seq_ext,
            As_target=As_target, k=k, Q_base=Qb, Q_ext=Qe,
            yield_after_cond=yc, mode=mode_val
        )
        st.success("–†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")

        # —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º DataFrame
        skip_ext = {"S_ext_%","As_ext_%","Seq_ext_%","Au_ext","Max_Q_ext_t","Q_ext_required_t"}
        data = []
        for key,label in LABELS.items():
            if key not in results: continue
            if mode_val == 2 and key in skip_ext: continue
            val = format_value(key, results[key])
            if val in ("", "0", "0.0", "0,00"): continue
            data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": label, "–ó–Ω–∞—á–µ–Ω–∏–µ": val})
        st.dataframe(pd.DataFrame(data))

if __name__ == "__main__":
    main()
