# streamlit_app.py ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
import streamlit as st
import pandas as pd
from fc_autoclave_calc import calc_fc_autoclave, calculate_missing_seq_param
import io

LABELS = {
    "S_base_%": "–°–µ—Ä–∞ –≤ –æ—Å–Ω. (%)",
    "As_base_%": "–ú—ã—à—å—è–∫ –≤ –æ—Å–Ω. (%)",
    "Seq_base_%": "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ—Å–Ω. (%)",
    "Au_base": "–ó–æ–ª–æ—Ç–æ –≤ –æ—Å–Ω. (–≥/—Ç)",
    "S_ext_%": "–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",
    "As_ext_%": "–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",
    "Seq_ext_%": "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω. (%)",
    "Au_ext": "–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)",
    "As_target": "–¶–µ–ª–µ–≤–æ–π As (%)",
    "k": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k",
    "yield_after_cond": "–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (%)",
    "Total_capacity_t": "–û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å (—Ç)",
    "Max_Q_base_t": "–ú–∞–∫—Å. –º–∞—Å—Å–∞ –æ—Å–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Max_Q_ext_t": "–ú–∞–∫—Å. –º–∞—Å—Å–∞ —Å—Ç–æ—Ä–æ–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Max_total_Q_t": "–ú–∞–∫—Å. –æ–±—â–∏–π –æ–±—ä—ë–º —Å—ã—Ä—å—è (—Ç)",
    "Q_base_t": "–§–∞–∫—Ç. –º–∞—Å—Å–∞ –æ—Å–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Q_ext_required_t": "–§–∞–∫—Ç. –º–∞—Å—Å–∞ —Å—Ç–æ—Ä–æ–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Mix_total_Q_t": "–§–∞–∫—Ç–∏—á. –æ–±—â–∞—è —Å–º–µ—Å—å (—Ç)",
    "Mix_As_%": "–ò—Ç–æ–≥–æ–≤—ã–π As –≤ —Å–º–µ—Å–∏ (%)",
    "Mix_Seq_%": "–ò—Ç–æ–≥–æ–≤—ã–π Seq –≤ —Å–º–µ—Å–∏ (%)",
    "Total_Seq_mass_t": "–°—É–º–º–∞ —Å–µ—Ä–Ω–æ–≥–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞ (—Ç)",
    "Autoclaves_used": "–ù—É–∂–Ω–æ –∞–≤—Ç–æ–∫–ª–∞–≤–æ–≤ (—à—Ç)",
    "Mix_Au_g_t": "–ó–æ–ª–æ—Ç–æ –≤ —Å–º–µ—Å–∏ (–≥/—Ç)",
    "Total_Au_kg": "–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞ (–∫–≥)",
    "Mass_kek_fk_t": "–ö–ï–ö –§–ö (—Ç)"
}

UNIT_FORMATS = {
    "%": lambda x: f"{x:.2f}", "—Ç": lambda x: f"{x:.0f}", "–≥/—Ç": lambda x: f"{x:.2f}",
    "—à—Ç": lambda x: f"{x:.2f}", "–∫–≥": lambda x: f"{x:.0f}", "": lambda x: f"{x:.3f}"
}

def format_value(key, value):
    if value is None:
        return ""
    if "%" in key:
        return UNIT_FORMATS["%"](value)
    elif key.endswith("_t"):
        return UNIT_FORMATS["—Ç"](value)
    elif key in ("Au_base", "Au_ext", "Mix_Au_g_t"):
        return f"{value:.2f}"
    elif key.endswith("_kg"):
        return UNIT_FORMATS["–∫–≥"](value)
    elif key.endswith("_used"):
        return UNIT_FORMATS["—à—Ç"](value)
    else:
        return UNIT_FORMATS[""](value)

st.set_page_config(page_title="–ê–≤—Ç–æ–∫–ª–∞–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç", layout="wide")
def main():
    ACCESS_CODE = "23101981"  # ‚Üê —É—Å—Ç–∞–Ω–æ–≤–∏ –∑–¥–µ—Å—å —Å–≤–æ–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞


    code = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", type="password")
    if code != ACCESS_CODE:
        st.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        st.stop()
    
    mode_val = st.radio("–†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞:", options=[1, 2], format_func=lambda x: "1 ‚Äì –î–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞" if x == 1 else "2 ‚Äì –û–¥–∏–Ω –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç")
    reset = st.button("–°–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è")
    if reset:
        st.experimental_rerun()

    st.title("–†–∞—Å—á—ë—Ç —Ñ–ª–æ—Ç–æ–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –∏ –∞–≤—Ç–æ–∫–ª–∞–≤–æ–≤")
    with st.form("input_form"):
        st.markdown("### üü¶ –ò—Å—Ö–æ–¥–Ω–æ–µ —Å—ã—Ä—å—ë")
        name_base = st.text_input("–ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞", value="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç 1")
        Au_base = st.number_input("–ó–æ–ª–æ—Ç–æ –≤ –æ—Å–Ω. (–≥/—Ç)", min_value=0.0, max_value=200.0, value=0.0, step=0.1)
        S_base = st.number_input("–°–µ—Ä–∞ –≤ –æ—Å–Ω. (%)", min_value=0.0, max_value=100.0, value=0.0, step=0.01)
        As_base = st.number_input("–ú—ã—à—å—è–∫ –≤ –æ—Å–Ω. (%)", min_value=0.0, max_value=30.0, value=0.0, step=0.01)
        Seq_base = st.number_input("–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ—Å–Ω. (%)", min_value=0.0, max_value=100.0, value=0.0, step=0.01, help="–ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        st.markdown("---")
        st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–∫–ª–∞–≤–∞")
        col_hours1, col_hours2 = st.columns([3, 1])
        with col_hours2:
            work_hours_year = st.number_input("–†–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –≤ –≥–æ–¥—É", min_value=1000, max_value=9000, value=7500, step=100, key="input_hours")
        col_prod1, col_prod2 = st.columns([3, 1])
        with col_prod2:
            seq_productivity_per_hour = st.number_input("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∞–≤–∞ (—Ç/—á)", min_value=0.1, max_value=10.0, value=4.07, step=0.01, key="input_prod")

        if mode_val == 1:
            st.markdown("---")
            st.markdown("### üü• –°—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å—ã—Ä—å—ë")
            name_ext = st.text_input("–ò–º—è —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞", value="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç 2")
            col_au_ext1, col_au_ext2 = st.columns([3, 1])
            Au_ext = st.number_input("–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)", min_value=0.0, max_value=200.0, value=0.0, step=0.1, key="input_Au_ext")
            col_se1, col_se2 = st.columns([3, 1])
            S_ext = st.number_input("–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)", min_value=0.0, max_value=100.0, value=0.0, step=0.01, key="input_S_ext")
            col_ae1, col_ae2 = st.columns([3, 1])
            As_ext = st.number_input("–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)", min_value=0.0, max_value=100.0, value=0.0, step=0.01, key="input_As_ext")
            col_seqe1, col_seqe2 = st.columns([3, 1])
            Seq_ext = st.number_input("–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω. (%)", min_value=0.0, max_value=50.0, value=0.0, step=0.01, key="input_Seq_ext")
        else:
            name_ext = ""
            Au_ext = 0.0
            S_ext = 0.0
            As_ext = 0.0
            Seq_ext = 0.0

        st.markdown("---")
        st.markdown("### üéØ –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        As_target = st.number_input("–¶–µ–ª–µ–≤–æ–π As (%)", min_value=0.0, max_value=10.0, value=3.0, step=0.01)
        k = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k", min_value=0.0, max_value=1.0, value=0.371, step=0.001)
        Q_base = st.number_input("Q –æ—Å–Ω. (—Ç/–≥–æ–¥)", min_value=0.0, max_value=500000.0, value=140000.0, step=1000.0)
        Q_ext = st.number_input("Q —Å—Ç–æ—Ä–æ–Ω. (—Ç/–≥–æ–¥)", min_value=0.0, max_value=500000.0, value=38500.0, step=1000.0)
        yield_after_cond = st.number_input("–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (%)", min_value=0.0, max_value=100.0, value=70.4, step=0.1)

        submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç..."):
        if submitted:
            Q_base = Q_base if Q_base > 0 else None
        Q_ext = Q_ext if Q_ext > 0 else None

        if Seq_base == 0 and (S_base > 0 or As_base > 0):
            Seq_base = calculate_missing_seq_param(S_base, As_base, None, k)
            st.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Å–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {Seq_base:.2f}%")

        if Seq_ext == 0 and (S_ext > 0 or As_ext > 0):
            Seq_ext = calculate_missing_seq_param(S_ext, As_ext, None, k)
            st.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Å–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ: {Seq_ext:.2f}%")

        results = calc_fc_autoclave(
            name_base=name_base, Au_base=Au_base, S_base=S_base, As_base=As_base, Seq_base=Seq_base,
            work_hours_year=work_hours_year, seq_productivity_per_hour=seq_productivity_per_hour,
            name_ext=name_ext, Au_ext=Au_ext, S_ext=S_ext, As_ext=As_ext, Seq_ext=Seq_ext,
            As_target=As_target, k=k, Q_base=Q_base, Q_ext=Q_ext,
            yield_after_cond=yield_after_cond, mode=mode_val
        )
        if 'Mix_Au_g_t' in results:
    st.warning(f"üîç DEBUG: Mix_Au_g_t (raw) = {results['Mix_Au_g_t']}")

        st.success("–†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
        data = []
        for key in LABELS:
            if key in results:
                if mode_val == 2 and key in ["S_ext_%", "As_ext_%", "Seq_ext_%", "Au_ext", "Max_Q_ext_t", "Q_ext_required_t"]:
                    continue  # –ø—Ä–æ–ø—É—Å–∫ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Å—ã—Ä—å—è –≤ —Ä–µ–∂–∏–º–µ 2
                value = results[key]
                formatted = format_value(key, value)
                label = LABELS[key]
                if str(formatted).strip() not in ('0', '0.0', '0.00'):
                    data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": label, "–ó–Ω–∞—á–µ–Ω–∏–µ": formatted})

        df = pd.DataFrame(data)
        st.dataframe(df)

        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            df_export = df.copy()
            if mode_val == 2:
                df_export = df_export[~df_export["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"].isin([
                    "–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)", "–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)", "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω. (%)", "–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)",
                    "–ú–∞–∫—Å. –º–∞—Å—Å–∞ —Å—Ç–æ—Ä–æ–Ω. —Å—ã—Ä—å—è (—Ç)", "–§–∞–∫—Ç. –º–∞—Å—Å–∞ —Å—Ç–æ—Ä–æ–Ω. —Å—ã—Ä—å—è (—Ç)"
                ])]
            worksheet_name = "autoclave"
            worksheet_title = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ ({'2 ‚Äì –û–¥–∏–Ω –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç' if mode_val == 2 else '1 ‚Äì –î–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞'})"
            df_export.to_excel(writer, index=False, sheet_name=worksheet_name, startrow=2)
            worksheet = writer.sheets[worksheet_name]
            worksheet.write("A1", worksheet_title)
            workbook = writer.book
            worksheet = writer.sheets["autoclave"]
            format1 = workbook.add_format({"bg_color": "#DDEBF7"})
            format2 = workbook.add_format({"bg_color": "#FCE4D6"})
            for row in range(1, len(df_export) + 1):
                fmt = format1 if row % 2 == 0 else format2
                worksheet.set_row(row, None, fmt)

        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel (.xlsx)",
            data=buffer,
            file_name="autoclave_result.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == '__main__':
    main()
