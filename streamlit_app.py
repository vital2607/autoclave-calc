import streamlit as st
import pandas as pd
from fc_autoclave_calc import calc_fc_autoclave, calculate_missing_seq_param
import io

LABELS = {
    "S_base_%": "–°–µ—Ä–∞ –≤ –æ—Å–Ω. (%)",
    "As_base_%": "–ú—ã—à—å—è–∫ –≤ –æ—Å–Ω. (%)",
    "Seq_base_%": "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ—Å–Ω. (%)",
    "Au_base": "–ó–æ–ª–æ—Ç–æ –≤ –æ—Å–Ω. (–≥/—Ç)",
    "S_ext_%": "–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",
    "As_ext_%": "–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",
    "Seq_ext_%": "–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω. (%)",
    "Au_ext": "–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)",
    "As_target": "–¶–µ–ª–µ–≤–æ–π As (%)",
    "k": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k",
    "yield_after_cond": "–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (%)",
    "Total_capacity_t": "–û–±—â–∞—è –≥–æ–¥–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å (—Ç)",
    "Max_Q_base_t": "–ú–∞–∫—Å. –º–∞—Å—Å–∞ –æ—Å–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Max_Q_ext_t": "–ú–∞–∫—Å. –º–∞—Å—Å–∞ —Å—Ç–æ—Ä–æ–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Max_total_Q_t": "–ú–∞–∫—Å. –æ–±—â–∏–π –æ–±—ä—ë–º —Å—ã—Ä—å—è (—Ç)",
    "Q_base_t": "–§–∞–∫—Ç. –º–∞—Å—Å–∞ –æ—Å–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Q_ext_required_t": "–§–∞–∫—Ç. –º–∞—Å—Å–∞ —Å—Ç–æ—Ä–æ–Ω. —Å—ã—Ä—å—è (—Ç)",
    "Mix_total_Q_t": "–§–∞–∫—Ç–∏—á. –æ–±—â–∞—è —Å–º–µ—Å—å (—Ç)",
    "Mix_As_%": "–ò—Ç–æ–≥–æ–≤—ã–π As –≤ —Å–º–µ—Å–∏ (%)",
    "Mix_Seq_%": "–ò—Ç–æ–≥–æ–≤—ã–π Seq –≤ —Å–º–µ—Å–∏ (%)",
    "Total_Seq_mass_t": "–°—É–º–º–∞ —Å–µ—Ä–Ω–æ–≥–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞ (—Ç)",
    "Autoclaves_used": "–ù—É–∂–Ω–æ –∞–≤—Ç–æ–∫–ª–∞–≤–æ–≤ (—à—Ç)",
    "Mix_Au_g_t": "–ó–æ–ª–æ—Ç–æ –≤ —Å–º–µ—Å–∏ (–≥/—Ç)",
    "Total_Au_kg": "–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞ (–∫–≥)",
    "Mass_kek_fk_t": "–ö–ï–ö –§–ö (—Ç)"
}

UNIT_FORMATS = {
    "%": lambda x: f"{x:.2f}",
    "—Ç": lambda x: f"{x:.0f}",
    "–≥/—Ç": lambda x: f"{x:.2f}",
    "—à—Ç": lambda x: f"{x:.2f}",
    "–∫–≥": lambda x: f"{x:.0f}",
    "": lambda x: f"{x:.3f}"
}

def format_value(key, value):
    if value is None:
        return ""
    # –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Mix_Au_g_t ‚Äî –¥–≤–∞ –∑–Ω–∞–∫–∞ –∏ –∑–∞–ø—è—Ç–∞—è
    if key == "Mix_Au_g_t":
        return f"{value:.2f}".replace(".", ",")
    if "%" in key:
        return UNIT_FORMATS["%"](value)
    elif key.endswith("_t"):
        return UNIT_FORMATS["—Ç"](value)
    elif key in ("Au_base", "Au_ext"):
        return f"{value:.2f}"
    elif key.endswith("_kg"):
        return UNIT_FORMATS["–∫–≥"](value)
    elif key.endswith("_used"):
        return UNIT_FORMATS["—à—Ç"](value)
    else:
        return UNIT_FORMATS[""](value)

st.set_page_config(page_title="–ê–≤—Ç–æ–∫–ª–∞–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç", layout="wide")

def main():
    ACCESS_CODE = "23101981"
    code = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", type="password")
    if code != ACCESS_CODE:
        st.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        st.stop()

    mode_val = st.radio(
        "–†–µ–∂–∏–º —Ä–∞—Å—á—ë—Ç–∞:",
        options=[1, 2],
        format_func=lambda x: "1 ‚Äì –î–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞" if x == 1 else "2 ‚Äì –û–¥–∏–Ω –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç"
    )
    if st.button("–°–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è"):
        st.experimental_rerun()

    st.title("–†–∞—Å—á—ë—Ç —Ñ–ª–æ—Ç–æ–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –∏ –∞–≤—Ç–æ–∫–ª–∞–≤–æ–≤")
    with st.form("input_form"):
        st.markdown("### üü¶ –ò—Å—Ö–æ–¥–Ω–æ–µ —Å—ã—Ä—å—ë")
        name_base = st.text_input("–ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞", value="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç 1")
        Au_base = st.number_input("–ó–æ–ª–æ—Ç–æ –≤ –æ—Å–Ω. (–≥/—Ç)", 0.0, 200.0, 0.0, 0.1)
        S_base  = st.number_input("–°–µ—Ä–∞ –≤ –æ—Å–Ω. (%)",        0.0, 100.0, 0.0, 0.01)
        As_base = st.number_input("–ú—ã—à—å—è–∫ –≤ –æ—Å–Ω. (%)",      0.0, 30.0,  0.0, 0.01)
        Seq_base= st.number_input("–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ—Å–Ω. (%)",0.0,100.0,0.0,0.01)

        st.markdown("---")
        st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–∫–ª–∞–≤–∞")
        work_hours_year         = st.number_input("–†–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –≤ –≥–æ–¥—É", 1000,9000,7500,100)
        seq_productivity_per_hour = st.number_input("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∞–≤–∞ (—Ç/—á)", 0.1,10.0,4.07,0.01)

        if mode_val == 1:
            st.markdown("---")
            st.markdown("### üü• –°—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å—ã—Ä—å—ë")
            name_ext= st.text_input("–ò–º—è —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞", value="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç 2")
            Au_ext  = st.number_input("–ó–æ–ª–æ—Ç–æ –≤ —Å—Ç–æ—Ä–æ–Ω. (–≥/—Ç)", 0.0,200.0,0.0,0.1)
            S_ext   = st.number_input("–°–µ—Ä–∞ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",    0.0,100.0,0.0,0.01)
            As_ext  = st.number_input("–ú—ã—à—å—è–∫ –≤ —Å—Ç–æ—Ä–æ–Ω. (%)",  0.0,100.0,0.0,0.01)
            Seq_ext = st.number_input("–°–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω. (%)",0.0,50.0,0.0,0.01)
        else:
            name_ext = ""
            Au_ext = S_ext = As_ext = Seq_ext = 0.0

        st.markdown("---")
        st.markdown("### üéØ –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        As_target = st.number_input("–¶–µ–ª–µ–≤–æ–π As (%)", 0.0,10.0,3.0,0.01)
        k         = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç k",   0.0,1.0,0.371,0.001)
        Q_base    = st.number_input("Q –æ—Å–Ω. (—Ç/–≥–æ–¥)",   0.0,500000.0,140000.0,1000.0)
        Q_ext     = st.number_input("Q —Å—Ç–æ—Ä–æ–Ω. (—Ç/–≥–æ–¥)",0.0,500000.0,38500.0,1000.0)
        yield_after_cond = st.number_input("–í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (%)",0.0,100.0,70.4,0.1)
        submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

    if submitted:
        Q_base = None if Q_base == 0 else Q_base
        Q_ext  = None if Q_ext  == 0 else Q_ext

        if Seq_base == 0 and (S_base or As_base):
            Seq_base = calculate_missing_seq_param(S_base, As_base, None, k)
            st.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Å–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {Seq_base:.2f}%")
        if Seq_ext == 0 and mode_val == 1 and (S_ext or As_ext):
            Seq_ext = calculate_missing_seq_param(S_ext, As_ext, None, k)
            st.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Å–µ—Ä–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ: {Seq_ext:.2f}%")

        results = calc_fc_autoclave(
            name_base, Au_base, S_base, As_base, Seq_base,
            work_hours_year, seq_productivity_per_hour,
            name_ext, Au_ext, S_ext, As_ext, Seq_ext,
            As_target, k, Q_base, Q_ext, yield_after_cond, mode_val
        )
        st.success("–†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")

        data = []
        for key in LABELS:
            if key not in results:
                continue
            value = results[key]
            formatted = format_value(key, value)
            label = LABELS[key]
            if formatted not in ("", "0", "0.0", "0.00") or key == "Mix_Au_g_t":
                data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": label, "–ó–Ω–∞—á–µ–Ω–∏–µ": formatted})

        df = pd.DataFrame(data)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mix_Au_g_t (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        mask = df["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] == "–ó–æ–ª–æ—Ç–æ –≤ —Å–º–µ—Å–∏ (–≥/—Ç)"
        if mask.any():
            df.loc[mask, "–ó–Ω–∞—á–µ–Ω–∏–µ"] = (
                df.loc[mask, "–ó–Ω–∞—á–µ–Ω–∏–µ"]
                  .str.replace(",", ".")
                  .astype(float)
                  .map(lambda x: f"{x:.2f}".replace(".", ","))
            )

        st.dataframe(df)

        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
            df_export = df.copy()
            df_export.to_excel(writer, index=False, sheet_name="autoclave", startrow=2)
            ws = writer.sheets["autoclave"]
            ws.write("A1", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ ({'2 ‚Äì –û–¥–∏–Ω –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç' if mode_val==2 else '1 ‚Äì –î–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞'})")
            fmt1 = writer.book.add_format({"bg_color": "#DDEBF7"})
            fmt2 = writer.book.add_format({"bg_color": "#FCE4D6"})
            for ri in range(1, len(df_export)+1):
                ws.set_row(ri, None, fmt1 if ri % 2 == 0 else fmt2)

        st.download_button(
            "–°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel (.xlsx)",
            data=buffer,
            file_name="autoclave_result.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == "__main__":
    main()
